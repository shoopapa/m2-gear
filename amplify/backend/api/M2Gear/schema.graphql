type SessionGroup @model @auth(rules: [
  { allow: groups, groups: ["admin"], operations: [read, create, update, delete]},
  { allow: owner }
]) {
  id: ID!
  move: Move @hasOne
  sessions: [Session] @hasMany
}

type Move @model @auth(rules: [
    { allow: private, operations: [read] },
    { allow: groups, groups: ["admin"], operations: [read, create, update, delete]},
]) {
  id: ID!
  createdAt: String
  type: String!
}

type Session @model @auth(rules: [
  { allow: groups, groups: ["admin"], operations: [read, create, update, delete]},
  { allow: owner }
]) {
  id: ID!
  createdAt: String
  quaternionTimestamp:       [Float!]!
  quaternionW:               [Float!]!
  quaternionX:               [Float!]!
  quaternionY:               [Float!]!
  quaternionZ:               [Float!]!
  linearAccerationTimestamp: [Float!]! #g
  linearAccerationX:         [Float!]! #g
  linearAccerationY:         [Float!]! #g
  linearAccerationZ:         [Float!]! #g
  tags: [Tag] @manyToMany(relationName: "SessionTags")
}

type Tag @model @auth(rules: [
  { allow: groups, groups: ["admin"]},
  { allow: private, operations: [create, read] },
]) {
  id: ID!
  createdAt: String
  name: String!
  value: String!
  sessions: [Session] @manyToMany(relationName: "SessionTags")
}
